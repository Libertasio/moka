require 'rubygems'
require 'sinatra'
require 'pp'

module Moka
  class Gitolite
    include Moka::Models

    def run(gitolitedir, prepend_files = nil)
      keydir = File.join(gitolitedir, "keydir")
      File.makedirs(keydir) unless File.directory?(keydir)

      confdir = File.join(gitolitedir, "conf")
      File.makedirs(confdir) unless File.directory?(confdir)

      # project array
      projects = Hash.new

      for maintainer in Moka::Models::Maintainer.all(:active => true).sort
        if pubkeys(keydir, maintainer)
          # store the projects this maintainer handles
          for project in maintainer.projects
            projects[project.name] = Array.new if not projects[project.name]
            projects[project.name] << maintainer.username
          end
        end
      end

      conf = "# This file is generated by Moka\n\n"

      if prepend_files
        for filename in prepend_files
          file = File.new(filename, "r")
          file.each {|line| conf << line }
          file.close
        end
      end

      for classification in Moka::Models::Classification.find_all.sort
        for project in classification.project_names.sort
          conf << "repo " + classification.name + "/" + project + "\n"
          conf << "\tRW = @repo-admin"

          maintainers = projects[project]
          if maintainers
            conf << "\n\tRW ="
            maintainers.sort.each { |name| conf << " " + name }
          end
          conf << "\n\n"
        end
      end

      #projects.sort.each do |project, maintainers|
      #  classification = project.classification
      #  if classification
      #    conf << "repo " + classification.name + "/" + project.name + "\n"
      #    conf << "\tRW ="
      #    maintainers.sort.each { |name| conf << " " + name }
      #    conf << "\n\n"
      #  else
      #    puts "ERROR: #{project.name} has no classification"
      #  end
      #end

      cfile = File.new(File.join(confdir, "gitolite.conf"), "w+")
      begin
        cfile.flock(File::LOCK_SH)
        cfile.puts conf
      ensure
        cfile.flock(File::LOCK_UN)
      end
      cfile.close
    end

    def pubkeys(keydir, maintainer)
      haskeys = false

      if maintainer.pubkeys and not maintainer.pubkeys.empty?
        keys = maintainer.pubkeys.split("\n").sort
        n = 1
        keys.each do |key|
          filename = File.join(keydir, maintainer.username + "@" + n.to_s + ".pub")
          file = File.new(filename, "w+")

          if file
            begin
              file.flock(File::LOCK_SH)
              file.puts key
            ensure
              file.flock(File::LOCK_UN)
            end
            file.close
            n += 1
          else
            puts "Unable to open file " + filename
          end
        end

        haskeys = true if n > 1
      end

      return haskeys
    end
  end
end
